# Generated by Django 5.1.6 on 2025-03-18 11:52

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('cmms', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CostCentre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(max_length=255, verbose_name='Symbol')),
                ('name', models.CharField(max_length=255, verbose_name='Nazwa')),
                ('description', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Opis')),
            ],
            options={
                'verbose_name': 'Centrum kosztowze',
                'verbose_name_plural': 'Centra kosztowe',
            },
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nazwa')),
                ('street', models.CharField(max_length=255, verbose_name='Ulica')),
                ('street_number', models.CharField(max_length=255, verbose_name='Nr posesji')),
                ('postal_code', models.CharField(max_length=255, verbose_name='Kod pocztowy')),
                ('city', models.CharField(max_length=255, verbose_name='Miejscowość')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logo/', verbose_name='Logo')),
                ('NIP', models.BigIntegerField(verbose_name='NIP')),
                ('REGON', models.BigIntegerField(verbose_name='REGON')),
                ('KRS', models.BigIntegerField(verbose_name='KRS')),
                ('telephone', models.CharField(blank=True, max_length=255, null=True, verbose_name='Telefon')),
                ('fax', models.CharField(blank=True, max_length=255, null=True, verbose_name='Fax')),
                ('email', models.CharField(max_length=255, verbose_name='E-mail')),
            ],
            options={
                'verbose_name': 'Placówka medyczna',
                'verbose_name_plural': 'Placówki medyczne',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('stamp', models.ImageField(blank=True, null=True, upload_to='stamps/', verbose_name='Pieczątka')),
                ('signature', models.ImageField(blank=True, null=True, upload_to='signatures/', verbose_name='Podpis')),
                ('phone', models.CharField(blank=True, max_length=100, null=True, verbose_name='Telefon')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['username', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contractor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('staff_pks', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Pracownicy')),
                ('name', models.CharField(max_length=255, verbose_name='Nazwa')),
                ('NIP', models.BigIntegerField(verbose_name='NIP')),
                ('street', models.CharField(max_length=255, verbose_name='Ulica')),
                ('street_number', models.CharField(max_length=255, verbose_name='Nr posesji')),
                ('postal_code', models.CharField(max_length=255, verbose_name='Kod pocztowy')),
                ('city', models.CharField(max_length=255, verbose_name='Miejscowość')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('staff', models.ManyToManyField(blank=True, related_name='contractor_staff', to=settings.AUTH_USER_MODEL, verbose_name='Pracownicy')),
            ],
            options={
                'verbose_name': 'Kontrahent',
                'verbose_name_plural': 'Kontrahenci',
            },
        ),
        migrations.CreateModel(
            name='HistoricalContractor',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('staff_pks', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Pracownicy')),
                ('name', models.CharField(max_length=255, verbose_name='Nazwa')),
                ('NIP', models.BigIntegerField(verbose_name='NIP')),
                ('street', models.CharField(max_length=255, verbose_name='Ulica')),
                ('street_number', models.CharField(max_length=255, verbose_name='Nr posesji')),
                ('postal_code', models.CharField(max_length=255, verbose_name='Kod pocztowy')),
                ('city', models.CharField(max_length=255, verbose_name='Miejscowość')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Kontrahent',
                'verbose_name_plural': 'historical Kontrahenci',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalInvoice',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True)),
                ('service_pks', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Zlecenia')),
                ('number', models.CharField(db_index=True, max_length=100, verbose_name='Numer')),
                ('name', models.CharField(max_length=255, verbose_name='Nazwa')),
                ('description', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Opis')),
                ('scan', models.TextField(blank=True, max_length=100, null=True, verbose_name='Skan')),
                ('net_value', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Wartość netto')),
                ('gross_value', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Wartość brutto')),
                ('contractor', models.CharField(blank=True, max_length=255, null=True, verbose_name='Kontrahent')),
                ('hospital', models.CharField(blank=True, max_length=255, null=True, verbose_name='Szpital')),
                ('status', models.IntegerField(blank=True, choices=[(1, 'Projekt'), (2, 'Zapisana'), (3, 'Zaakceptowana'), (4, 'Zaksięgowana')], null=True, verbose_name='status')),
                ('date', models.DateField(verbose_name='Data faktury')),
                ('payment_date', models.DateField(blank=True, null=True, verbose_name='Data płatności')),
                ('created_at', models.DateField(blank=True, editable=False, verbose_name='Data dodania')),
                ('posting_date', models.DateField(blank=True, null=True, verbose_name='Data księgowania')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Faktura',
                'verbose_name_plural': 'historical Faktury',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLocation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('staff_pks', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Personel')),
                ('name', models.CharField(max_length=255, verbose_name='Nazwa')),
                ('description', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Opis')),
                ('street', models.CharField(max_length=255, verbose_name='Ulica')),
                ('street_number', models.CharField(max_length=255, verbose_name='Nr posesji')),
                ('postal_code', models.CharField(max_length=255, verbose_name='Kod pocztowy')),
                ('city', models.CharField(max_length=255, verbose_name='Miejscowość')),
                ('telephone', models.CharField(blank=True, max_length=255, null=True, verbose_name='Telefon')),
                ('fax', models.CharField(blank=True, max_length=255, null=True, verbose_name='Fax')),
                ('email', models.CharField(max_length=255, verbose_name='E-mail')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('person', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Osoba')),
            ],
            options={
                'verbose_name': 'historical Lokalizacja',
                'verbose_name_plural': 'historical Lokalizacje',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('service_pks', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Zlecenia')),
                ('number', models.CharField(max_length=100, unique=True, verbose_name='Numer')),
                ('name', models.CharField(max_length=255, verbose_name='Nazwa')),
                ('description', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Opis')),
                ('scan', models.FileField(blank=True, null=True, upload_to='invoices/', verbose_name='Skan')),
                ('net_value', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Wartość netto')),
                ('gross_value', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Wartość brutto')),
                ('contractor', models.CharField(blank=True, max_length=255, null=True, verbose_name='Kontrahent')),
                ('hospital', models.CharField(blank=True, max_length=255, null=True, verbose_name='Szpital')),
                ('status', models.IntegerField(blank=True, choices=[(1, 'Projekt'), (2, 'Zapisana'), (3, 'Zaakceptowana'), (4, 'Zaksięgowana')], null=True, verbose_name='status')),
                ('date', models.DateField(verbose_name='Data faktury')),
                ('payment_date', models.DateField(blank=True, null=True, verbose_name='Data płatności')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Data dodania')),
                ('posting_date', models.DateField(blank=True, null=True, verbose_name='Data księgowania')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('service', models.ManyToManyField(to='cmms.service', verbose_name='Zlecenia')),
            ],
            options={
                'verbose_name': 'Faktura',
                'verbose_name_plural': 'Faktury',
            },
        ),
        migrations.CreateModel(
            name='CostBreakdown',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_name', models.CharField(max_length=255, verbose_name='Urządzenie')),
                ('device_id', models.IntegerField(verbose_name='ID urządzenia')),
                ('device_manufacturer', models.CharField(max_length=255, verbose_name='Producent urządzenia')),
                ('device_model', models.CharField(max_length=255, verbose_name='Model urządzenia')),
                ('device_serial_number', models.CharField(max_length=255, verbose_name='Numer seryjny urządzenia')),
                ('device_inventory_number', models.CharField(max_length=255, verbose_name='Numer inwentarzowy urządzenia')),
                ('cost_center_name', models.CharField(max_length=255, verbose_name='Nazwa Cetrum Kosztowego')),
                ('cost_center_symbol', models.CharField(max_length=255, verbose_name='Symbol Centrum Kosztowego')),
                ('cost_center_description', models.CharField(max_length=255, verbose_name='Opis Centrum Kosztowego')),
                ('cost_center_id', models.IntegerField(verbose_name='ID Centrum Kosztowego')),
                ('net_cost', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Koszt netto')),
                ('gross_cost', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Koszt brutto')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.invoice', verbose_name='Faktura')),
            ],
            options={
                'verbose_name': 'Podział kosztów',
                'verbose_name_plural': 'Podział kosztów',
                'permissions': (('view_cost_chart', 'Może oglądać wykres podziału kosztów'),),
            },
        ),
        migrations.CreateModel(
            name='InvoiceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024, verbose_name='Nazwa')),
                ('symbol', models.CharField(max_length=128, verbose_name='Symbol')),
                ('net_price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Cena netto')),
                ('amount', models.IntegerField(verbose_name='Ilość')),
                ('net_cost', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Koszt netto')),
                ('gross_cost', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Koszt brutto')),
                ('vat', models.IntegerField(choices=[(1, '8%'), (2, '23%'), (3, 'zw')])),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.invoice', verbose_name='Faktura')),
            ],
            options={
                'verbose_name': 'Pozycja faktury',
                'verbose_name_plural': 'Pozycje faktury',
            },
        ),
        migrations.CreateModel(
            name='InvoiceService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.invoice')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmms.service')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('staff_pks', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Personel')),
                ('name', models.CharField(max_length=255, verbose_name='Nazwa')),
                ('description', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Opis')),
                ('street', models.CharField(max_length=255, verbose_name='Ulica')),
                ('street_number', models.CharField(max_length=255, verbose_name='Nr posesji')),
                ('postal_code', models.CharField(max_length=255, verbose_name='Kod pocztowy')),
                ('city', models.CharField(max_length=255, verbose_name='Miejscowość')),
                ('telephone', models.CharField(blank=True, max_length=255, null=True, verbose_name='Telefon')),
                ('fax', models.CharField(blank=True, max_length=255, null=True, verbose_name='Fax')),
                ('email', models.CharField(max_length=255, verbose_name='E-mail')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='person', to=settings.AUTH_USER_MODEL, verbose_name='Osoba')),
                ('staff', models.ManyToManyField(blank=True, related_name='staff', to=settings.AUTH_USER_MODEL, verbose_name='Personel')),
            ],
            options={
                'verbose_name': 'Lokalizacja',
                'verbose_name_plural': 'Lokalizacje',
                'ordering': ['name'],
            },
        ),
    ]
